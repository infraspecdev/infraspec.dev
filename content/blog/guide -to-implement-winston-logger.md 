"The only thing more satisfying than fixing a bug is reading the frustrated log messages that led you there." This humorous yet insightful quote perfectly encapsulates the importance of logging in software development. In any project, large or small, understanding what's happening under the hood is paramount. That's where Winston Logger comes into play.

![](https://cdn.hashnode.com/res/hashnode/image/upload/v1714104394861/9eef99ba-b18b-4e21-bfaa-eec9f94aa212.jpeg align="center")

## Introduction

Winston Logger is a versatile logging library for Node.js applications. Unlike the built-in console module, Winston provides more flexibility and customization options for logging messages in various formats and to different transports. It supports logging to the console, files, databases, and third-party services like [Loggly or Papertrail](https://betterstack.com/logs?utm_medium=c&utm_campaign=adwords19703922957&utm_source=adwords&utm_content=648793502849&utm_term=papertrail&gad_source=1&gclid=CjwKCAjwoa2xBhACEiwA1sb1BG9qUjgD2jGosVMhYytL76lWcnaL38LiXWlSxH3z5Hk6FG7YjShL1BoCeU0QAvD_BwE), making it a popular choice for logging in Node.js projects.

## Installation and Setup

To get started with Winston Logger, you can install it via npm using the following command:

```javascript
npm install winston
```

## Configuration Options

Create a logging configuration file (e.g logger.js) that your application code will import to get started.

Winston Logger offers a wide range of configuration options to customize its behavior. You can set the log level, specify transports, define custom log formats, and more.

### **What are logging levels in Winston logger?**

In Winston Logger, logging levels are used to categorize log messages based on their severity or importance. Winston defines several standard logging levels, each corresponding to a specific numeric value and representing different degrees of urgency.For example,

```javascript
levels: {
    error: 0,
    warn: 1,
    info: 2,
    http: 3,
    verbose: 4,
    debug: 5,
    silly: 6
  }
```

### **What are Transports in Winston logger?**

In Winston Logger , Transports allow developers to specify how and where log messages should be logged, such as to the console, files, databases, or third-party services.For example,

```javascript
 transports: [
    new winston.transports.Console(), 
    new winston.transports.File({ filename: 'logfile.log' }) 
}
```

### **What are formats in Winston logger?**

In Winston Logger , Formats allow developers to customize how log messages are formatted before being outputted by the logger. Formats can include timestamp, log level, message, metadata, and any custom formats to tailor the appearance of log messages to their specific requirements. For example,

```javascript
const customFormat = winston.format.printf(({ level, message, timestamp }) => {
  return `${timestamp} [${level}]: ${message}`;
});
```

Here's an example of configuring Winston :

```javascript
const winston = require('winston');

const customLevels = {
  levels: {
    error: 0,
    warn: 1,
    info: 2,
    debug: 3
  },
  colors: {
    error: 'red',
    warn: 'yellow',
    info: 'green',
    debug: 'blue'
  }
};

const customFormat = winston.format.printf(({ level, message, timestamp }) => {
  return `${timestamp} [${level}]: ${message}`;
});

winston.addColors(customLevels.colors);

const logger = winston.createLogger({
  level: 'info', // Default log level
  levels: customLevels.levels,
  format: winston.format.combine(
    winston.format.timestamp(),
    customFormat
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'logfile.log' })
  ]
});

module.exports = logger;
```

### **Logging Middleware for Express.js**

If you're using Express.js for your Node.js application, you can integrate Winston Logger with middleware to log HTTP requests and responses. Here's how you can configure Winston middleware:

```javascript
const expressWinston = require('express-winston');

app.use(expressWinston.logger({
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'requests.log' })
  ]
}));
```

### **Rotating Files in Winston:**

In Winston Logger, rotating files refer to a mechanism where log files are automatically rotated or split into multiple files based on certain criteria such as file size, time intervals, or a combination of both. This ensures that log files do not grow indefinitely and consume excessive disk space, while also facilitating log management and analysis.

> Note: For more advanced options and detailed configuration settings for log rotation, you can refer to the official documentation of the [winston-daily-rotate-file](https://www.npmjs.com/package/winston-daily-rotate-file) package.

Here is an example for retaining logs for 14 days before being deleted:

```javascript
const winston = require('winston');
const DailyRotateFile = require('winston-daily-rotate-file');

const dailyRotateTransport = new DailyRotateFile({
  filename: 'app-%DATE%.log',
  datePattern: 'YYYY-MM-DD',
  zippedArchive: true,
  maxFiles: '14d' 
});

const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    format.timestamp(),
    format.printf(({ timestamp, level, message }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    dailyRotateTransport,
    new winston.transports.Console() 
  ]
});

module.exports = logger;
```

> Note: Handling Zipped Log Files in Winston Logger
> 
> When using the `winston-daily-rotate-file` package with zipped log archives, it's important to note that the package doesn't automatically handle unzipping of log files before deletion. As a result, zipped log files may remain in the directory even after they are no longer needed.

For additional resources and support for using Winston Logger, check out the official documentation on [GitHub](https://github.com/winstonjs/winston) .